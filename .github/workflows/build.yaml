name: Build & Test
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build package
      run: |
        python -m pip install --upgrade build twine
        python -m build
        twine check --strict dist/*
    - name: Install coveralls
      run: sudo pip install coveralls
    - name: Run tests
      run: sudo PATH=$PATH coverage run setup.py test

  release:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - build-and-test
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Build package
      run: |
        python -m pip install --upgrade build twine
        python -m build
        twine check --strict dist/*
        rm -f dist/*.whl
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Set asset name
      run: |
        export PKG=$(ls dist/ | grep tar)
        set -- $PKG
        echo "name=$1" >> $GITHUB_ENV
    - name: Upload release asset to GitHub
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ env.name }}
        asset_name: ${{ env.name }}
        asset_content_type: application/zip
